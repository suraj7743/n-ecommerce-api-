const express = require("express");
const router = express();

//importing auth controller
const authController = require("../controllers/authController");
/**
 * @swagger
 * components:
 *  schemas:
 *   user:
 *    type: object
 *    properties:
 *     id:
 *      type: string
 *      example: "2345532_3121232_42"
 *      description: "auto generated by database"
 *     username:
 *      type: string
 *      example: "John"
 *      required: true
 *     email:
 *      type: string
 *      example: "john@gmail.com"
 *      required: true
 *     password:
 *      type: string
 *      example: "John@123#"
 *      required: true
 *
 *
 */

/**
 * @swagger
 * /user/register:
 *  post:
 *   tags:
 *    - user
 *   summary: Create new user
 *   description: Can create a new account by logging
 *   requestBody:
 *    content:
 *     application/json:
 *      schema:
 *       $ref: "#/components/schemas/user"
 *     application/x-www-form-urlencoded:
 *      schema:
 *        $ref: '#/components/schemas/user'
 *   responses:
 *    200:
 *     description: "User successfully created"
 *     content:
 *      application/json:
 *       schema:
 *        $ref: "#/components/schemas/user"
 *    400:
 *     description: "Error creating user "
 * */

router.post("/register", authController.registerUser);

/**
 * @swagger
 * /user/login:
 *  post:
 *   tags:
 *    - user
 *   summary: Login new user
 *   description: Login with the registered account
 *   requestBody:
 *    content:
 *     application/json:
 *      schema:
 *       type: object
 *       properties:
 *        email:
 *         type: string
 *        password:
 *         type:string
 *       example:
 *        email: "john@gmail.com"
 *        password: "John@123#"
 *     application/x-www-form-urlencoded:
 *       schema:
 *       type: object
 *       properties:
 *        email:
 *         type: string
 *        password:
 *         type:string
 *       example:
 *        email: "john@gmail.com"
 *        password: "John@123#"
 *
 *   responses:
 *    200:
 *     description: "User successfully Logged in"
 *     content:
 *      application/json:
 *       schema:
 *        $ref: "#/components/schemas/user"
 *    400:
 *     description: "Error creating user "
 * */

router.post("/login", authController.loginUser);

/**
 * @swagger
 * /user/forgetPassword:
 *  post:
 *   tags:
 *    - user
 *   summary: when user forget password need to provide the email
 *   description: User need to provide the registered email to get reset link in their respective email
 *   requestBody:
 *    content:
 *     application/json:
 *      schema:
 *       type: object
 *       properties:
 *        email:
 *         type: string
 *       example:
 *        email: "john@gmail.com"
 *     application/x-www-form-urlencoded:
 *       schema:
 *       type: object
 *       properties:
 *        email:
 *         type: string
 *       example:
 *        email: "john@gmail.com"
 *   responses:
 *    200:
 *     description: "successfully send link to email to reset their password"
 *
 *    400:
 *     description: "Error sending mail or invalid email "
 * */
router.post("/forgetPassword", authController.forgetpassword);

/**
 * @swagger
 * /user/resetPassword/{token}:
 *  patch:
 *   tags:
 *    - user
 *   summary: User need to input new password for resetting the password
 *   description: User need to provide the new password after clicking the reset link in email
 *   parameters:
 *   - name: token
 *     in: path
 *     description: Enter the token receive from the mail
 *     required: true
 *     schema:
 *      type: string
 *      example: 2345ei
 *   requestBody:
 *    content:
 *     application/json:
 *      schema:
 *       type: object
 *       properties:
 *        password:
 *         type: string
 *       example:
 *        password: "john@123#"
 *     application/x-www-form-urlencoded:
 *       schema:
 *       type: object
 *       properties:
 *        password:
 *         type: string
 *       example:
 *        password: "john@123#"
 *   responses:
 *    200:
 *     description: "successfully reset the password"
 *
 *    400:
 *     description: "Error resetting the password"
 * */
router.patch("/resetPassword/:token", authController.resetPassword);

//exporting router
module.exports = router;
